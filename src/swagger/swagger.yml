openapi: 3.0.0
info:
  title: Core NodeJS TypeScript Project API
  version: 1.0.0
  description:
    API documentation for the Core NodeJS TypeScript Project
servers:
  - url: http://localhost:10093

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User registered successfully
        400:
          description: Bad request

  /api/auth/login:
    post:
      summary: Login a user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User logged in successfully
        400:
          description: Bad request

  /api/auth/forgot-password:
    post:
      summary: Forgot Password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: Password reset link sent
        400:
          description: Bad request

  /api/auth/send-email:
    post:
      summary: Send Email
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: Email sent successfully
        400:
          description: Bad request

  /api/auth/verify-email:
    post:
      summary: Verify Email
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        200:
          description: Email verified successfully
        400:
          description: Bad request

  /api/profile:
    get:
      summary: Get user profile
      tags: [User Profile]
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /api/media/file:
    post:
      summary: Upload a single file
      tags: [File Upload]
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: File uploaded successfully
        400:
          description: Bad request

    delete:
      summary: Delete a file
      tags: [File Upload]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileId:
                  type: string
      responses:
        200:
          description: File deleted successfully
        400:
          description: Bad request

  /api/media/files:
    post:
      summary: Upload multiple files
      tags: [File Upload]
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Files uploaded successfully
        400:
          description: Bad request

  /api/{router}:
    post:
      summary: Create a new record
      tags: [Dynamic Endpoints]
      security:
        - bearerAuth: [] 
      parameters:
        - in: path
          name: router
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: Record created successfully
        400:
          description: Bad request

    get:
      summary: Get records
      tags: [Dynamic Endpoints]
      parameters:
        - in: path
          name: router
          required: true
          schema:
            type: string
      responses:
        200:
          description: Records retrieved successfully
        400:
          description: Bad request

  /api/{router}/{id}:
    put:
      summary: Update a record
      tags: [Dynamic Endpoints]
      security:
        - bearerAuth: [] 
      parameters:
        - in: path
          name: router
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: Record updated successfully
        400:
          description: Bad request

    delete:
      summary: Delete a record
      tags: [Dynamic Endpoints]
      parameters:
        - in: path
          name: router
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Record deleted successfully
        400:
          description: Bad request

  /api/destroy/{router}/{id}:
    delete:
      summary: Destroy a record
      tags: [Destroy Records]
      security:
        - bearerAuth: [] 
      parameters:
        - in: path
          name: router
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Record destroyed successfully
        400:
          description: Bad request

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      description: Bearer token for authentication
      example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiYWRtaW4iOjAsImlhdCI6MTcwNDcwMzY2OCwiZXhwIjoxNzA0NzA1NDY4fQ.iwpVisZKVHLRlP5M7lVznbBuVJ22S8YZ_uPGZW1iF8E
      required: true
      schema:
        type: string
